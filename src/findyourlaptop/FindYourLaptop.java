package findyourlaptop;

import java.awt.Component;
import java.awt.HeadlessException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author BhedaGanG
 */
public class FindYourLaptop extends javax.swing.JFrame {
    
    DefaultTableModel DefaultTableModel;
    private Component frame;
    // Three arraylist for storing data
    public ArrayList<Laptop> serialProducts = new ArrayList<>();
    public ArrayList<Laptop> priceProducts = new ArrayList<>();
    public ArrayList<Integer> priceOnly = new ArrayList<>();
    
    /**
     * Creates new form Laptop
     */
    public FindYourLaptop() {
        initComponents();
        DefaultTableModel = (DefaultTableModel) table.getModel();
        displayAll();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        screenSizeBG = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboRam = new javax.swing.JComboBox<>();
        comboProcessor = new javax.swing.JComboBox<>();
        add = new javax.swing.JButton();
        size_11 = new javax.swing.JRadioButton();
        size_13 = new javax.swing.JRadioButton();
        size_14 = new javax.swing.JRadioButton();
        size_15 = new javax.swing.JRadioButton();
        size_17 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtPriceSearch = new javax.swing.JTextField();
        comboManufacturer = new javax.swing.JComboBox<>();
        txtStorage = new javax.swing.JTextField();
        jbtnPrice = new javax.swing.JButton();
        jbtnScreen = new javax.swing.JButton();
        comboScreen = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiExit = new javax.swing.JMenuItem();
        jmiClear = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiALC = new javax.swing.JMenuItem();
        jmiDoc = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frameL"); // NOI18N
        setSize(new java.awt.Dimension(694, 430));

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No", "Manufacturer", "Model", "Processor", "Size", "RAM", "Storage", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(7);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(1).setPreferredWidth(95);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(2).setPreferredWidth(110);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(3).setPreferredWidth(60);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(4).setPreferredWidth(60);
            table.getColumnModel().getColumn(5).setResizable(false);
            table.getColumnModel().getColumn(5).setPreferredWidth(40);
            table.getColumnModel().getColumn(6).setResizable(false);
            table.getColumnModel().getColumn(6).setPreferredWidth(50);
            table.getColumnModel().getColumn(7).setResizable(false);
            table.getColumnModel().getColumn(7).setPreferredWidth(60);
        }

        jLabel2.setText("Price:");

        jLabel3.setText("RAM:");

        jLabel4.setText("Storage:");

        jLabel5.setText("Processor:");

        jLabel7.setText("Display Size:");

        comboRam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "4 GB", "8 GB", "16 GB", "32 GB", "" }));

        comboProcessor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "Intel i3", "Intel i5", "Intel i7", "Intel i9" }));

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        screenSizeBG.add(size_11);
        size_11.setText("11");

        screenSizeBG.add(size_13);
        size_13.setText("13");

        screenSizeBG.add(size_14);
        size_14.setText("14");

        screenSizeBG.add(size_15);
        size_15.setText("15");

        screenSizeBG.add(size_17);
        size_17.setText("17");

        jLabel6.setText("Category:");

        jLabel8.setText("Model:");

        jLabel9.setText("Manufacturer:");

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jLabel13.setText("Price:");

        comboManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "Apple", "Samsung", "Dell", "Razer", "MSI", "Lenovo" }));

        jbtnPrice.setText("Search by Price");
        jbtnPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPriceActionPerformed(evt);
            }
        });

        jbtnScreen.setText("Search");
        jbtnScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnScreenActionPerformed(evt);
            }
        });

        comboScreen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "11 inch", "13 inch", "14 inch", "15 inch", "17 inch" }));

        jmFile.setText("File");

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmiExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jmiExitKeyPressed(evt);
            }
        });
        jmFile.add(jmiExit);

        jmiClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiClear.setText("Clear");
        jmiClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiClearActionPerformed(evt);
            }
        });
        jmiClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jmiClearKeyPressed(evt);
            }
        });
        jmFile.add(jmiClear);

        jMenuBar1.add(jmFile);

        jmHelp.setText("Help");

        jmiALC.setText("ArrayList Contents");
        jmiALC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiALCActionPerformed(evt);
            }
        });
        jmHelp.add(jmiALC);

        jmiDoc.setText("Open Documentation");
        jmiDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDocActionPerformed(evt);
            }
        });
        jmHelp.add(jmiDoc);

        jMenuBar1.add(jmHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(674, 674, 674))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbtnScreen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnPrice))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(comboRam, 0, 229, Short.MAX_VALUE)
                                            .addComponent(comboProcessor, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(comboManufacturer, javax.swing.GroupLayout.Alignment.LEADING, 0, 229, Short.MAX_VALUE))
                                        .addGap(82, 82, 82)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtModelNumber)
                                                .addGap(24, 24, 24))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtStorage)
                                                .addGap(52, 52, 52))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(size_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(size_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(size_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(size_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(size_17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(36, 36, 36))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(clear)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnPrice))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jbtnScreen)
                        .addComponent(comboScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(comboManufacturer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(comboProcessor))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(size_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(size_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(size_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(size_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(size_17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboRam, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                                .addComponent(txtStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(add)
                                .addComponent(clear))
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        try{
            // take value from the GUI to add a product
            String manufacturer = (String) comboManufacturer.getSelectedItem();
            String modelNumber = txtModelNumber.getText();
            String screenSize = null;
            String processor = (String) comboProcessor.getSelectedItem();
            String ram = (String) comboRam.getSelectedItem();
            int storage = Integer.parseInt(txtStorage.getText().trim());
            int price = Integer.parseInt(txtPrice.getText().trim());
            
            // Auto increasing Serial No
            Laptop lastLaptop = serialProducts.get(serialProducts.size()-1);
            int lastLaptopSN = lastLaptop.getSN();
            int serialNo = lastLaptopSN + 1;    
                    
            // for radio button
            if(size_11.isSelected()){
                screenSize="11 inch";
            }
            if(size_13.isSelected()){
                screenSize="13 inch";
            }
            if(size_14.isSelected()){
                screenSize="14 inch";
            }
            if(size_15.isSelected()){
                screenSize="15 inch";
            }
            if(size_17.isSelected()){
                screenSize="17 inch";
            }

            // Validating data by using nested if loop and checking for duplicate Model No
            if(!modelNumber.equals("")){
                if(serialNo != 0){
                    if(comboManufacturer.getSelectedIndex()!=0){
                        if(notDuplicate(modelNumber, 2)){	
                            if(screenSize!=null){
                                if(comboProcessor.getSelectedIndex()!=0){
                                    if(comboRam.getSelectedIndex()!=0){
                                        if(storage != 0){
                                            if(price != 0){
                                                Laptop laptop = new Laptop (serialNo, manufacturer, modelNumber,
                                                                     processor, screenSize, ram, storage, price);
                                                // validated data serialNo, manufacturer, modelNumber, screenSize, processor, ram, storage
                                                // method called from the bottom to add it to table and arraylists
                                                addProduct(laptop);
                                                JOptionPane.showMessageDialog(rootPane, "Laptop added: " + manufacturer + " " + modelNumber + " ");
                                                
                                            }
                                            else{
                                                JOptionPane.showMessageDialog(rootPane, "Please enter Price","Missing input", JOptionPane.WARNING_MESSAGE);
                                            }
                                        }
                                        else{
                                            JOptionPane.showMessageDialog(rootPane, "Please enter storage size","Missing input", JOptionPane.WARNING_MESSAGE);
                                        }
                                    }
                                    else{
                                        JOptionPane.showMessageDialog(rootPane, "Please select ram size","Missing input", JOptionPane.WARNING_MESSAGE);
                                    }
                                }
                                else{
                                    JOptionPane.showMessageDialog(rootPane, "Please select processor","Missing input", JOptionPane.WARNING_MESSAGE);
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(rootPane, "Please select screensize size","Missing input", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(rootPane, "Duplicate value for model no: "+ modelNumber, "Duplicate Model", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane, "Please select manufacturer","Missing input", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "Please enter serial number","Missing input", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Please enter model number","Missing input", JOptionPane.WARNING_MESSAGE);        
            }
        }
        catch(HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(frame, e.getMessage(),
                "Error: Invalid Input or something", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        clearInput();
    }//GEN-LAST:event_clearActionPerformed

    private void jbtnPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPriceActionPerformed
        // Search by price
        try {
            int p = Integer.parseInt(txtPriceSearch.getText().trim());
            int x = binarySearcher(priceOnly, 0, priceOnly.size(), p);
            if (x < 0){
                JOptionPane.showMessageDialog(rootPane, "No laptop found for that price");
            }
            else {
                Laptop l = (priceProducts.get(x));
                JOptionPane.showMessageDialog(rootPane, "laptop is " + l.getModelNumber() + "\n Price: "+ l.getPrice() + "\n Manufactured By: "+ l.getManufacturer());
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(frame, e.getMessage()+"\n Price too great or invalid input type ",
            "Error: Invalid Input", JOptionPane.ERROR_MESSAGE );
        }
    }//GEN-LAST:event_jbtnPriceActionPerformed

    private void jbtnScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnScreenActionPerformed
        // Search by category
        String selectedValue = comboScreen.getSelectedItem().toString();
        String details = "";
        if (serialProducts.size() > 0 ){
            for(Laptop product: serialProducts){
                if (product.getScreenSize().equals(selectedValue) ){
                    details = details + "\n " + product.getManufacturer() + " " + product.getModelNumber() + " " + product.getPrice();
                }
            }
        }
        if(!details.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Laptop are: " + details);
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "No laptop found for that size");
        }
    }//GEN-LAST:event_jbtnScreenActionPerformed

    private void jmiDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDocActionPerformed
        // TODO add your handling code here:
//        if (Desktop.isDesktopSupported()) {
//            try {
//                File myFile = new File("/path/to/file.pdf");
//                Desktop.getDesktop().open(myFile);
//            } catch (IOException ex) {
//                // no application registered for PDFs
//            }
//        }
        
    }//GEN-LAST:event_jmiDocActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiClearActionPerformed
        // TODO add your handling code here:
        clearInput();
    }//GEN-LAST:event_jmiClearActionPerformed

    private void jmiALCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiALCActionPerformed
        // TODO add your handling code here:
        productIterator();
    }//GEN-LAST:event_jmiALCActionPerformed

    private void jmiExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jmiExitKeyPressed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jmiExitKeyPressed

    private void jmiClearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jmiClearKeyPressed
        // TODO add your handling code here:
        clearInput();
    }//GEN-LAST:event_jmiClearKeyPressed

    public boolean notDuplicate(String productModel, int index){
        // method to check duplicate model no which returns boolean
        boolean notDup  = false;
        int rows = table.getRowCount();
        int count = 0;
        for(int j = 0; j < rows; j++){
            if(String.valueOf(table.getValueAt(j,index)).equals(productModel)){
               count++;
            }
        }   
        if (count == 0){
            notDup = true;
            System.out.println(notDup);
        }
        return notDup;
    }
    
    public final void displayAll(){
        // method to add 12 products to the program
        Laptop product1 = new Laptop(1, "Samsung",   "notebook 11",  "Intel i3",   "11 inch", "8 GB", 1000, 40000);
        Laptop product2 = new Laptop(2, "Lenovo",    "Thinkpad X1", "Intel i7",   "15 inch", "4 GB", 2000, 190000);
        Laptop product3 = new Laptop(3, "Toshiba",   "Satellite L10-B","Intel i3", "11 inch", "4 GB", 500, 40000);
        Laptop product4 = new Laptop(4, "Apple",     "Air 13",       "Intel i5",   "13 inch", "8 GB", 256, 139000);
        Laptop product5 = new Laptop(5, "Samsung",   "notebook 15",  "Intel i5",   "15 inch", "16 GB", 1000, 74000);
        Laptop product6 = new Laptop(6, "Lenovo",    "C90E", "Intel i7",   "14 inch", "16 GB", 256, 190000);
        Laptop product7 = new Laptop(7, "Apple",   "MacBook Pro 15", "Intel i5", "15 inch", "8 GB", 256, 210000);
        Laptop product8 = new Laptop(8, "Dell",     "XPS 15",       "Intel i7",   "15 inch", "16 GB", 512, 189000);
        Laptop product9 = new Laptop(9, "Dell",   "inspiron 14",  "Intel i5",   "14 inch", "8 GB", 1000, 74000);
        Laptop product10 = new Laptop(10, "MSI",    "G47", "Intel i7",   "17 inch", "16 GB", 1512, 195000);
        Laptop product11 = new Laptop(11, "Razer",   "Stelth","Intel i5", "15 inch", "16 GB", 500, 210000);
        Laptop product12 = new Laptop(12, "MSI",    "p42", "Intel i7",   "17 inch", "16 GB", 1000, 195000);
        addProduct(product1); 
        addProduct(product2); 
        addProduct(product3); 
        addProduct(product4);
        addProduct(product5); 
        addProduct(product6); 
        addProduct(product7); 
        addProduct(product8); 
        addProduct(product9); 
        addProduct(product10); 
        addProduct(product11); 
        addProduct(product12); 
    }
    
    public void addProduct(Laptop product){
        // method to add the product to table and arraylists
        //addToTable(((Laptop)product).getLaptop());  // adds the product to table
        DefaultTableModel.addRow(((Laptop)product).getLaptop());
        serialProducts.add(product);                // adds product to SN arraylist
 
        // tosort according to price
        int n = priceProducts.size();
        if (n > 1 ){             
            for (int a = 0; a < n-1; a++){
                int priceA = priceProducts.get(a).getPrice();
                int priceB = priceProducts.get(a+1).getPrice();
                int lastP = priceProducts.get(n-1).getPrice();
                int testP = product.getPrice();
                
                if ( priceA >= testP ){
                    priceProducts.add(a, product);
                    priceOnly.add(a, product.getPrice());
                    break;
                }
              
                else if ( ( priceA < testP) &&  (priceB > testP)){
                    priceProducts.add(a+1, product);
                    priceOnly.add(a+1, product.getPrice());
                    break;
                }
                else if ( lastP <= testP){
                    priceProducts.add(product);
                    priceOnly.add(product.getPrice());
                    break;
                }
            }
        }
        else{
            priceProducts.add(product);
            priceOnly.add(product.getPrice());
        }
    }
    
    public final void productIterator(){
        // Code to iterate products
        System.out.println("serial");
        if (serialProducts.size() > 0 ){
            serialProducts.forEach((laptop) -> {
                laptop.displayModel();
            });
        }
        System.out.println("price sorted");
        if (priceProducts.size() > 0 ){
            priceProducts.forEach((laptop) -> {
                laptop.displayModel();
            });
        }
        System.out.println("price only");
        if (priceOnly.size() > 0 ){
            priceOnly.forEach((l) -> {
                System.out.print(l+ ", ");
            });
        }
        
    }
    
    public int binarySearcher(ArrayList<Integer> priceArray, int leftIndex, int rightIndex, int x) {  
        
        if (rightIndex >= leftIndex) 
        { 
            System.out.println("Searching...");
            int middleIndex =  ((rightIndex - leftIndex)/2) + leftIndex; 
            if (priceArray.get(middleIndex) == x){
                System.out.println("found"); 
                return middleIndex;
            }
            else if (priceArray.get(middleIndex) > x){
                System.out.println("left"); 
                return binarySearcher(priceArray, leftIndex, middleIndex-1, x);
            }
            else{
                System.out.println("right");  
                return binarySearcher(priceArray, middleIndex+1, rightIndex, x); 
            }
        }   
        return -1; 
    }    
    
    public void clearInput(){
        txtModelNumber.setText("");
        txtPrice.setText("");
        txtStorage.setText("");
        comboProcessor.setSelectedIndex(0);
        comboManufacturer.setSelectedIndex(0);
        comboRam.setSelectedIndex(0);
        screenSizeBG.clearSelection();
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindYourLaptop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FindYourLaptop().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton clear;
    private javax.swing.JComboBox<String> comboManufacturer;
    private javax.swing.JComboBox<String> comboProcessor;
    private javax.swing.JComboBox<String> comboRam;
    private javax.swing.JComboBox<String> comboScreen;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnPrice;
    private javax.swing.JButton jbtnScreen;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenuItem jmiALC;
    private javax.swing.JMenuItem jmiClear;
    private javax.swing.JMenuItem jmiDoc;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.ButtonGroup screenSizeBG;
    private javax.swing.JRadioButton size_11;
    private javax.swing.JRadioButton size_13;
    private javax.swing.JRadioButton size_14;
    private javax.swing.JRadioButton size_15;
    private javax.swing.JRadioButton size_17;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPriceSearch;
    private javax.swing.JTextField txtStorage;
    // End of variables declaration//GEN-END:variables
}
